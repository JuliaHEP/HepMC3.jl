// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jlHepMC3.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<jlcxx::Module> : std::false_type { };
  template<> struct DefaultConstructible<jlcxx::Module> : std::false_type { };
}

// Class generating the wrapper for type jlcxx::Module
// signature to use in the veto file: jlcxx::Module
struct Jljlcxx_Module: public Wrapper {

  Jljlcxx_Module(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type jlcxx::Module (" __HERE__ ")");
    // defined in /home/hurtbadly/.julia/artifacts/7b2099c0a944e2b2d7f7ca3254c9681a9bf579a0/include/jlcxx/module.hpp:557:17
    jlcxx::TypeWrapper<jlcxx::Module>  t = jlModule.add_type<jlcxx::Module>("jlcxx!Module");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Module>>(new jlcxx::TypeWrapper<jlcxx::Module>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Module>> type_;
};
std::shared_ptr<Wrapper> newJljlcxx_Module(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jljlcxx_Module(module));
}
